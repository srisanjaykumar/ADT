#include<bits/stdc++.h>
using namespace std;
int check(int r , int c , int N , vector<vector<int>>& matrix , vector<vector<bool>>& visited){
    if(r >= 0 && r < N && c >= 0 && c < N && matrix[r][c] == 1 && !visited[r][c] ){
        return 1;
    }
    return 0;
}
void fun (int r , int c , int N , vector<vector<int>>& matrix , vector<vector<bool>>& visited , string s , vector<string>&ans ){
    if(r == N - 1 && c  == N - 1){
        ans.push_back(s);
        return;
    }
    visited[r][c] = true ;
    if(check(r + 1 , c , N , matrix , visited)){
        fun (r + 1 , c , N , matrix , visited , s + "D" , ans );
    }
    if(check(r - 1 , c , N , matrix , visited)){
        fun (r - 1 , c , N , matrix , visited , s + "U" , ans ); 
    }
    if(check(r , c - 1 , N , matrix , visited)){
        fun (r , c - 1 , N , matrix , visited , s + "L" , ans );
    }
    if(check(r , c + 1 , N , matrix , visited)){
        fun (r , c + 1 , N , matrix , visited , s + "R" , ans );
    }
    visited[r][c] = false;
}
int main(){
    int N;
    cin >> N;
    vector<vector<int>> matrix(N , vector<int>(N));
    vector<vector<bool>> visited(N , vector<bool>(N, false));
    vector<string>ans;
    for(int r = 0 ; r < N ; r++){
        for(int c = 0 ; c < N ; c++){
            cin >> matrix[r][c];
        }
    }
    if(matrix[0][0] == 1){
        fun(0 , 0 , N , matrix , visited , "",ans);
    }
    if(ans.empty()){
        cout<<-1;
    }
    else{
        for(string s : ans){
            cout<<s<<" ";
        }
    }
}
