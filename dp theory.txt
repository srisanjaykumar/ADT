dynamic programming:

LCS(Longest Common Subsequence):
      goal is to find the largest common subsequence in given input strings (2)
               ex:   
                    CBDA   ----   ACADB
                            LCS = CD
LIS(Longset Incresing Subsequnce):
      goal is to find the increasing subsequence in given input string(1)  
              ex:
                   1,2,1,3,3
                                ------  Max  = 3 (1,2,3);
Subset Problem:
       from the available arr of numbers we need to attain the target 
              ex:  
                  arr ={ 3 , 2 , 7 , 1}   ------ 6 = {3 , 2 , 1}
Edit Distance:
       use insert , delete , update to covert str1 to str 2
              ex:
                str 1 = this ; str 2 = there;
                str1 can be converted to str 2 with 3 moves;
0 - 1 knapsack:
       form weight aand value we need to find maximum profit;
           ex;
              W =10;
              weights = 2,1,2,1,3,4
              values =  6,4,5,7,8,9
output =  19

coin change:
           we need to assign minimum coins to assingn the change;
            ex:
               change = 11;
                coins = 5,2,1
                 change would be (5+5+1);
max sub square matrix:
             we need to find largest subsquae matrix in a gven matrix ;
             ex;
                 0 0 1 0 0
                 0 0 1 1 0           1 1
                 0 0 1 1 0    ---->  1 1 
                 0 0 0 0 0
                 0 0 0 0 0

 lps(Longest palindromic sequence):
       need to find a substring which iis a longest paliidrome in a sentence;
            ex:
                ACECC    --------> CEC
Minimum cost path:
         to find the minimum path to travel from left top grid to right bottom grid;
                ex;
     dp[i][j] = cost[i][j] + min ({dp[i - 1] [ j ],dp[i ] [ j -1 ],dp[i - 1] [ j -1 ]});
